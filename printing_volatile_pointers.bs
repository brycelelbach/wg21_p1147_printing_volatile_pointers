<!--
Copyright (c) 2018 NVIDIA Corporation 
Author: Bryce Adelstein Lelbach <brycelelbach@gmail.com>

Distributed under the Boost Software License v1.0 (boost.org/LICENSE_1_0.txt)
-->
<pre class='metadata'>
Title: Printing `volatile` Pointers
H1: Printing <code>volatile</code> Pointers
Shortname: P1147
Revision: 0
Status: P
Group: WG21
Audience: LEWG
URL: https://wg21.link/P1147R0
!Source: <a href="https://github.com/brycelelbach/wg21_p1147_printing_volatile_pointers/blob/master/printing_volatile_pointers.bs">github.com/wg21_p1147_printing_volatile_pointers/blob/master/printing_volatile_pointers.bs</a>
Issue Tracking: GitHub https://github.com/brycelelbach/wg21_p1147_printing_volatile_pointers/issues
Editor: Bryce Adelstein Lelbach, NVIDIA https://nvidia.com, brycelelbach@gmail.com
Markup Shorthands: markdown yes
No Abstract: yes
Toggle Diffs: no
Boilerplate: style-syntax-highlighting off
</pre>

<style>
pre {
  margin-top: 0px;
  margin-bottom: 0px;
}
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}
.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
math, span.math {
  font-family: serif;
  font-style: italic;
}
ul {
  list-style-type: "— ";
}
blockquote {
  counter-reset: paragraph;
}
div.numbered, div.newnumbered {
  margin-left: 2em;
  margin-top: 1em;
  margin-bottom: 1em;
}
div.numbered:before, div.newnumbered:before {
  position: absolute;
  margin-left: -2em;
  display-style: block;
}
div.numbered:before {
  content: counter(paragraph);
  counter-increment: paragraph;
}
div.newnumbered:before {
  content: "�";
}
div.numbered ul, div.newnumbered {
  counter-reset: list_item;
}
div.numbered li, div.newnumbered {
  margin-left: 3em;
}
div.numbered li:before, div.newnumbered li:before {
  position: absolute;
  margin-left: -4.8em;
  display-style: block;
}
div.numbered li:before {
  content: "(" counter(paragraph) "." counter(list_item) ")";
  counter-increment: list_item;
}
div.newnumbered li:before {
  content: "(�." counter(list_item) ")";
  counter-increment: list_item;
}
</style>

# Introduction # {#intro}

Printing pointers to `volatile` types with standard library output streams has
unexpected results.
Consider the following code:

```
#include <iostream>

int main()
{
           int* p0 = reinterpret_cast<         int*>(0xdeadbeef);
  volatile int* p1 = reinterpret_cast<volatile int*>(0xdeadbeef);

  std::cout << p0 << std::endl;
  std::cout << p1 << std::endl;
}
```

This produces the following output:

```
0xdeadbeef
1
```

What happened here? Well, `basic_ostream` has an `operator<<` for both `const void*`
and `bool`:

<blockquote>
<b>27.7.5.1 Class template `basic_ostream` <span style="float: right;">[ostream]</span></b>

<xmp>
namespace std {
  template<class charT, class traits = char_traits<charT>>
  class basic_ostream : virtual public basic_ios<charT, traits> {
  public:
    // ...

    // [ostream.formatted], formatted output
    // ...
    basic_ostream<charT, traits>& operator<<(bool n);
    basic_ostream<charT, traits>& operator<<(const void* p);
    // ...

    // ...
  };
}
</xmp>
</blockquote>

For `std::cout << p0`, `p0` (an `int*`) is implicitly converted to `const
void*` and `operator<<(const void*)` is called.
However, for `std::cout << p1`, the `operator<<(const void*)` overload is not a
match, as it discards qualifiers. Instead, the best match is
`operator<<(bool)`, so `p1` (a `volatile int*`) is implicitly converted to
`bool` and `operator<<(bool)` is called.

I suggest we add a new `operator<<(const volatile void*)` overload that
`const_cast`s away `volatile` and calls the `operator<<(const void*)`
overload.
Initially, I explored modifying the underlying `<locale>` methods and changing
the existing `operator<<(const void*)` to `operator<<(const volatile void*)`,
however, early feedback from other committee members pushed me away from this
direction, as there was concern that modifying `<locale>` would be an ABI
breaking change.

Note that `const_cast`ing away `volatile` is safe here.
We are not accessing or printing the value of the object that the pointer
points to, we are just printing the value of the pointer itself.

# Wording # {#wording}

NOTE: The � character is used to denote a placeholder section number which the
editor shall determine.

Modify <a href="http://eel.is/c++draft/ostream.inserters.arithmetic">[**ostream.inserters.arithmetic**]</a> as follows:

<blockquote>
<b>27.7.5.2.2 Arithmetic inserters <span style="float: right;">[ostream.inserters.arithmetic]</span></b>

<pre><code>
operator<<(bool val);
operator<<(short val);
operator<<(unsigned short val);
operator<<(int val);
operator<<(unsigned int val);
operator<<(long val);
operator<<(unsigned long val);
operator<<(long long val);
operator<<(unsigned long long val);
operator<<(float val);
operator<<(double val);
operator<<(long double val);
operator<<(const void* val);
</code></pre>

<div class="numbered">
*Effects:* The classes `num_get<>` and `num_put<>` handle locale-dependent
numeric formatting and parsing.
These inserter functions use the imbued `locale` value to perform numeric
formatting.
When `val` is of type `bool`, `long`, `unsigned long`, `long long`, `unsigned
long long`, `double`, `long double`, or `const void*`, the formatting
conversion occurs as if it performed the following code fragment:

<xmp>
bool failed = use_facet<
  num_put<charT, ostreambuf_iterator<charT, traits>>
    >(getloc()).put(*this, *this, fill(), val).failed();
</xmp>
</div>

<div class="ins">
<xmp>
basic_ostream<charT, traits>& operator<<(const volatile void* val);
</xmp>

<div class="numbered">
*Effects:* Equivalent to `return operator<<(const_cast<const void*>(val));`
</div>
</blockquote>

# Acknowledgements # {#acks}

Thanks to JF Bastien, Marshall Clow, Billy O'Neal, and Louis Dionne for
providing early review and feedback of this paper.
